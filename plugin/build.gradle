import com.github.spotbugs.SpotBugsTask

plugins {
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'java'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "com.github.spotbugs" version "3.0.0"
    id "com.moowork.node" version "1.3.1"
}


node {
    version = '14.19.3'
    npmVersion = '6.14.17'
    download = true
    workDir = file("${project.buildDir}/plugin/ui")
    nodeModulesDir = file("${project.rootDir}/plugin/ui")
}

npm_run_build {
    inputs.files fileTree("ui/src")
    inputs.file 'ui/package.json'
    inputs.file 'ui/package-lock.json'
    outputs.dir 'ui/build'
}

apply from: 'project-properties.gradle'

repositories {
    mavenCentral()
    mavenLocal()
    if (releaseMode) {
        dependencyRepos.forEach { path ->
            maven {
                setUrl("https://maven.pkg.github.com/reportportal/${path}")
                credentials {
                    username = findProperty("githubUserName")
                    password = findProperty("githubToken")
                }
            }
        }
    } else {
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:plugin-api:5.7.0'
        annotationProcessor 'com.github.reportportal:plugin-api:5.7.0'
    }
}

spotbugs {
    sourceSets = [sourceSets.main]
    reportLevel = "high"
}
tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.enabled = true
    }
}

build.dependsOn jacocoTestReport

artifacts {
    archives shadowJar
}

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

jar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.template.TemplatePlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.compile]
    zip64 true
    dependencies {
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compile
    }
    extension('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build

